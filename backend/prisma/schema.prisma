// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  googleId       String?  @unique
  email          String   @unique
  name           String
  bio            String?  @db.Text
  profilePicture String?
  medium         String? 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  followers Follow[]  @relation("UserFollowers")
  following Follow[]  @relation("UserFollowing")

  @@map("users")
}

model Post {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  imageUrl      String
  tags          String? 
  processStages Json? // Array of process images with descriptions
  medium        String? // Art medium category
  isProcessPost Boolean  @default(false) // Whether this is a multi-step process post
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  authorId String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId   String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)


  @@unique([userId, postId])
  @@map("likes")
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  followerId  String
  follower    User   @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)


  @@unique([followerId, followingId])
  @@map("follows")
}
